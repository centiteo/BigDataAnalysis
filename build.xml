<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build" name="BigDataAnalysis">
    <property environment="env"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.6"/>
    <property name="source" value="1.6"/>
    <property name="base.dir" value="${basedir}"/>
    <property name="name" value="bigdata-analysis"/>
    <property name="version" value="0.0.9"/>
    <property name="final.name" value="${name}-${version}"/>
    <property name="bin.dir" value="${basedir}/bin"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="lib_cdh5.0.dir" value="${lib.dir}/lib_cdh5_0"/>
    <property name="lib_cdh5.2.1.dir" value="${lib.dir}/lib_cdh5_2_1"/>
    <property name="conf.dir" value="${basedir}/conf"/>
    <property name="properties.dir" value="${basedir}/properties"/>
    <property name="docs.dir" value="${basedir}/docs"/>
    <property name="examples.dir" value="${basedir}/examples"/>
    <property name="obfuscator.dir" value="${basedir}/obfuscator"/>
    <property name="schema.dir" value="${basedir}/schema"/>
    <property name="src.dir" value="${basedir}/src"/>
    <property name="build.dir" value="${basedir}/target"/>
    <property name="dist.dir" value="${build.dir}/${final.name}"/>
    <property name="build.classes" value="${build.dir}/classes"/>

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <fileset dir="${lib.dir}/antlib"/>
        </classpath>
    </taskdef>
	
    <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
        <classpath>
            <fileset dir="lib/jaxb" includes="*.jar"/>
        </classpath>
    </taskdef>

    <if>
        <equals arg1="${cdh.version}" arg2="5.0"/>
        <then>
            <fileset id="version.classpath" dir="${lib_cdh5.0.dir}" includes="**/*.jar"/>
        </then>
        <else>
            <fileset id="version.classpath" dir="${lib_cdh5.2.1.dir}" includes="**/*.jar"/>
        </else>
    </if>

    <path id="compile.classpath">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <fileset refid="version.classpath"/>
    </path>

    <target name="init" depends="jaxb">
        <mkdir dir="target"/>
        <mkdir dir="${build.classes}"/>
        <!--        
        <copy includeemptydirs="false" todir="${build.classes}">
                <fileset dir="mapreduce/src/main/java">
                <exclude name="**/*.java"/>
                </fileset>
        </copy>
        <copy includeemptydirs="false" todir="${build.classes}">
            <fileset dir="hive/src/main/java">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    
        <copy includeemptydirs="false" todir="${build.classes}">
            <fileset dir="datagen/src/main/java">
               <exclude name="**/*.java"/>
            </fileset>
        </copy> 
        -->
        
        <!--
        <copy includeemptydirs="false" todir="${build.classes}">
            <fileset dir="hbase/src/main/java">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        -->

        <copy includeemptydirs="false" todir="${build.classes}">
            <fileset dir="dataload/src/main/java">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="${build.classes}">
            <fileset dir="server/src/main/java">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>

        <!--        
        <copy includeemptydirs="false" todir="${build.classes}">
            <fileset dir="test/src/test/java">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        -->

        <!--        
        <copy includeemptydirs="false" todir="${build.classes}">
            <fileset dir="solution/src/main/java">
                <exclude name="**/*.java"/>
            </fileset>
        </copy> 
        -->
        <copy includeemptydirs="false" todir="${build.classes}">
            <fileset dir="generated/src/main/java">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>

    <target name="clean">
        <delete dir="target"/>
        <delete dir="generated"/>
    </target>
    
    <target depends="init" name="build">
        <echo message="${ant.project.name}: ${ant.file}"/>
        
        <javac debug="true" debuglevel="${debuglevel}" encoding="UTF-8" destdir="${build.classes}" includeantruntime="false" source="${source}" target="${target}">
            <src path="generated/src/main/java"/>
            <!--            
            <src path="mapreduce/src/main/java"/>
            <src path="hive/src/main/java"/>   
            -->
            <!--src path="datagen/src/main/java"/-->
            <!--src path="hbase/src/main/java"/-->
            <src path="common/src/main/java"/>
            <src path="dataload/src/main/java"/>
            <src path="server/src/main/java"/>
            <!--            
            <src path="solution/src/main/java"/> 
            -->
            <src path="test/src/test/java"/>

            <classpath refid="compile.classpath"/>
        </javac>
    </target>

    <target name="package" depends="clean,build">
        <mkdir dir="target"/>
        <mkdir dir="${build.classes}/lib"/>
        <copy file="conf/log4j.properties" todir="${build.classes}" />
       <!--
        <copy todir="${build.classes}">
            <fileset dir="conf">
                <include name="*.xml"/>
            </fileset>
        </copy>
        -->
        
        <!--
        <copy todir="${build.classes}/lib" >
            <fileset dir="lib">
                <include name="*.jar"/>
            </fileset>
            <fileset refid="version.classpath"/>
        </copy>
        -->
        <jar destfile="target/${name}-${version}.jar"
        basedir="${build.classes}"
        includes="**/*.*"/>
    </target>
    
    <target name="jaxb">
        <mkdir dir="generated/src/main/java"/>
        <xjc destdir="generated/src/main/java">
            <schema dir="schema" includes="*.xsd"/>
            <binding dir="schema" includes="*.xjb"/>
        </xjc>
    </target>
   
    <target name="package-mask" depends="package"
      description="Build distribution">
        <delete dir="${dist.dir}"/>
        <mkdir dir="${dist.dir}"/>
        
        <if>
          <equals arg1="${idp.version}" arg2="2.5.1"/>
          <then>
            <exec executable="java">
              <arg value="-jar" />
              <arg value="${obfuscator.dir}/proguard4.11/lib/proguard.jar" />
              <arg value="@${obfuscator.dir}/analysis_IDP2.5.1.pro" />
            </exec>
          </then>
          <else>
            <exec executable="java">
              <arg value="-jar" />
              <arg value="${obfuscator.dir}/proguard4.11/lib/proguard.jar" />
              <arg value="@${obfuscator.dir}/analysis_IDP3.1.pro" />
            </exec>
          </else>
        </if>
    
        
        <!--exec executable="java">
              <arg value="-jar" />
            <arg value="${obfuscator.dir}/proguard4.11/lib/proguard.jar" />
            <arg value="@${obfuscator.dir}/analysis_IDP2.5.1.pro" />
          </exec>

        
        <exec executable="java">
            <arg value="-jar" />
            <arg value="${obfuscator.dir}/proguard4.11/lib/proguard.jar" />
            <arg value="@${obfuscator.dir}/analysis_IDP3.1.pro" />
        </exec-->

        <copy todir="${dist.dir}/bin" includeEmptyDirs="false">
            <fileset dir="${bin.dir}">
            </fileset>
        </copy>

        <copy todir="${dist.dir}/lib" includeEmptyDirs="false">
            <fileset dir="${lib.dir}">
            </fileset>
        </copy>

        <copy todir="${dist.dir}">
            <fileset file="${build.dir}/${name}-${version}-obfuscator.jar"/>
        </copy>

        <copy todir="${dist.dir}/conf">
            <fileset dir="${conf.dir}"/>
        </copy>

        <copy todir="${dist.dir}/docs">
            <fileset dir="${docs.dir}"/>
        </copy>

        <copy todir="${dist.dir}/properties">
            <fileset dir="${properties.dir}"/>
        </copy>

        <copy file="build.xml" tofile="${dist.dir}/build.xml"/>

        <copy todir="${dist.dir}">
            <fileset dir=".">
                <include name="*.txt" />
                <include name="*.sh" />
            </fileset>
        </copy>

        <chmod perm="ugo+x" type="file" parallel="false">
            <fileset dir="${dist.dir}/">
                <include name="**.sh" />
            </fileset>
            <fileset dir="${dist.dir}/bin/">
                <include name="**.sh" />
            </fileset>
            <fileset dir="${dist.dir}/properties/">
                <include name="**.sh" />
            </fileset>
        </chmod>
    </target>

    <!-- ================================================================== -->
    <!-- Make release tarball                                               -->
    <!-- ================================================================== -->
    <target name="tar" depends="package" description="Make release tarball">
        <tarfileset dir="${build.dir}" mode="664">
            <exclude name="${final.name}/bin/**.sh" />
            <exclude name="${final.name}/**.sh" />
            <exclude name="${final.name}/properties/**.sh" />
            <include name="${final.name}/**" />
        </tarfileset>
        <tarfileset dir="${build.dir}" mode="755">
            <include name="${final.name}/bin/**.sh" />
            <include name="${final.name}/**.sh" />
            <include name="${final.name}/properties/**.sh" />
        </tarfileset>
    </target>
</project>
